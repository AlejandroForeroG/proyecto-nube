name: app 
services:
  postgres:
    image: postgres:16-alpine
    container_name: db_postgres
    environment:
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
      POSTGRES_DB: app_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -p 5432 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    container_name: app_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  sonarqube_db:
    image: postgres:15-alpine
    container_name: sonarqube_db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -p 5432 -U sonar -d sonarqube || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - sonarqube_pg_data:/var/lib/postgresql/data
    restart: unless-stopped

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      sonarqube_db:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube_db:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9000:9000"
    restart: unless-stopped
  rest_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rest_api
    env_file: .env
    command: /my-app/prestart.sh
    volumes:
      - ./app:/my-app/app
      - ./uploads:/my-app/uploads
      - ./processed:/my-app/processed
      - ./assets:/my-app/assets
      - ./collections:/my-app/collections:ro
      - ./tests:/my-app/tests
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      sonarqube_db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/health | grep -q '\"status\": \"ok\"'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s


  celery_worker:
    build: { context: ., dockerfile: Dockerfile }
    container_name: celery_worker
    env_file: .env
    command: celery -A app.celery_worker.celery_app worker --loglevel=info --concurrency=1 --prefetch-multiplier=1
    volumes:
      - ./app:/my-app/app
      - ./uploads:/my-app/uploads
      - ./processed:/my-app/processed
      - ./assets:/my-app/assets
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    restart: unless-stopped


  nginx:
    image: nginx:alpine
    container_name: app_nginx
    ports: ["8080:80"]
    volumes:
    - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    - ./processed:/usr/share/nginx/html/processed:ro
    - ./uploads:/usr/share/nginx/html/uploads:ro
    depends_on: [ rest_api, sonarqube ]
    restart: unless-stopped
volumes:
  postgres_data: 

  sonarqube_pg_data:


